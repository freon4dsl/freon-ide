import {  type Module, inject } from 'langium';
import { createDefaultModule, createDefaultSharedModule, type DefaultSharedModuleContext, type LangiumServices, type LangiumSharedServices, type PartialLangiumServices } from 'langium/lsp';
import { FreonAstGeneratedModule, FreonGeneratedSharedModule } from './generated/module.js';
import { FreonValidator, registerValidationChecks } from './freon-validator.js';
import { MyScopeProvider2 } from './MyScopeProvider.js';
import { MyScopeComputation } from './MyScopeComputation.js';
// import { MyCompletionProvider } from './MyCompletionProvider.js';
import { MySemanticTokenProvider } from './MySemanticTokenProvider.js';
// import { MyCompletionProvider } from './MyCompletionProvider.js';
// import { MyScopeComputation, MyScopeProvider } from './MyScopeProvider.js';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type FreonAddedServices = {
    validation: {
        FreonValidator: FreonValidator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type FreonServices = LangiumServices & FreonAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const FreonModule: Module<FreonServices, PartialLangiumServices & FreonAddedServices> = {
    validation: {
        FreonValidator: () => new FreonValidator()
    },
    references: {
        // ScopeProvider: (services) => new MyScopeProvider(services),
        ScopeProvider: (services) => new MyScopeProvider2(services),
        // ScopeComputation: (services) => new DefaultScopeComputation(services),
        ScopeComputation: (services) => new MyScopeComputation(services),
    },
    lsp: {
        // CompletionProvider: (services) => new MyCompletionProvider(services),
        SemanticTokenProvider: (services) => new MySemanticTokenProvider(services)
    }
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createFreonServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    Freon: FreonServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        FreonGeneratedSharedModule
    );
    const Freon = inject(
        createDefaultModule({ shared }),
        FreonAstGeneratedModule,
        FreonModule
    );
    shared.ServiceRegistry.register(Freon);
    registerValidationChecks(Freon);
    if (!context.connection) {
        // We don't run inside a language server
        // Therefore, initialize the configuration provider instantly
        shared.workspace.ConfigurationProvider.initialized({});
    }
    return { shared, Freon };
}
